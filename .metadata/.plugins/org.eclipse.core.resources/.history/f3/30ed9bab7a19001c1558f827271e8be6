package com.abc.oqms.exception;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class GlobalException extends ResponseEntityExceptionHandler {
  {
		@ExceptionHandler(value=DuplicateEntryException.class)
		public ResponseEntity<ErrorResponse> handleDuplicateEntryException(Exception e){
			ErrorResponse errRes=new ErrorResponse();
			errRes.setError(e.getMessage());
			errRes.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			return new ResponseEntity<>(errRes,HttpStatus.INTERNAL_SERVER_ERROR);
		}
		@ExceptionHandler(value=RoundNotFoundException.class)
		public ResponseEntity<ErrorResponse> handleRoundNotFoundException(Exception e){
			ErrorResponse errRes=new ErrorResponse();
			errRes.setError(e.getMessage());
			errRes.setStatus(HttpStatus.NOT_FOUND.value());
			return new ResponseEntity<>(errRes,HttpStatus.NOT_FOUND);
		}
		@Override
		protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,HttpHeaders headers, HttpStatus status, WebRequest request) {
			Map<String, Object> body = new LinkedHashMap<>();
			body.put("status", status.value());
			List<String> errors = ex.getBindingResult().getFieldErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.toList());
			body.put("errors", errors);
			return new ResponseEntity<>(body, headers, status);
		}
	}

}
